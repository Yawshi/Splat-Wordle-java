package wordle;

/**
 * Represents a blind game of Wordle (ie instead of clues specifying which characters are of
 * correct letters and positions, and which are of correct letters but in incorrect positions, 
 * clues now only give the respective amounts). Inherits from {@code AbstractGame}. <p>
 * Aside from all methods in {@code AbstractGame}, has one constructor: <p>
 * > - {@code BlindGame()} runs a game of Wordle with the blind clue system. All output is printed
 * on the terminal, returns nothing. <p>
 * Overrides one method: <p>
 * > - {@code giveClue()} prints an interpretation of the {@code Clue} object generated by a guess
 * on the terminal.
 * @see AbstractGame
 */
class BlindGame extends AbstractGame {

    /**
     * Runs a game of Wordle, with the specified solution, maximum guesses allowed, presence of
     * the mixed length rule, as well as with the blind clue system. The game takes the following
     * steps: <p>
     * > 1. The player is prompted to make a guess. <p>
     * > 2. The guess is stored and used to generate a {@code Clue} object. <p>
     * > 3. If the guess matches the solution exactly, inform the player that the game is won. <p>
     * > 4. If not, give the clue, by showing how many characters are of the correct letter and 
     * positions, and how many are of the correct letter but in incorrect positions. <p>
     * > 5. Repeat from step 1 until the player either wins by matching the solution with a guess,
     * or loses by running out of guesses (has made guesses equal to the maximum number of guesses
     * allowed). <p>
     * All output is printed on the terminal, and nothing is returned.
     * @param solution the solution to the game
     * @param guessMax the maximum number of guesses allowed this game
     * @param mixedLength whether or not the mixed length rule is in play
     * @param explanation the flavour text for the solution
     * @see Clue
     */
    BlindGame(String solution, int guessMax, boolean mixedLength, String explanation) {
        this.solution = solution;
        this.guessMax = guessMax;
        this.mixedLength = mixedLength;
        this.explanation = explanation;
        Clue clue;

        System.out.println();
        System.out.println("--------------------- GAME START ---------------------");
        System.out.println();
        while (getGuessCount() <= getGuessMax()) {
            System.out.println("Guess " + getGuessCount() + " of " + getGuessMax());
            guess = makeGuess();
            logUsedLetters(guess);
            clue = generateClue(guess);
            if (clue.isExactMatch()) {
                System.out.println("That is correct! Amazing!!!");
                System.out.println(getExplanation());
                System.out.println("You got it in " + getGuessCount() + " guesses.");
                System.out.println();
                System.out.println("--------------------- GAME OVER ---------------------");
                System.out.println();
                return;
            } else {
                giveClue(clue);
                incrementGuessCount();
                showUsedLetters();
                System.out.println();
            }
        }
        System.out.println("You ran out of guesses! Better luck next time.");
        System.out.println("The solution is " + getSolution() + ".");
        System.out.println(getExplanation());
        System.out.println();
        System.out.println("--------------------- GAME OVER ---------------------");
        System.out.println();
    }

    /**
     * Prints on the terminal an interpretation of the {@code Clue} object provided. Has the
     * following components: <p>
     * > - if the game plays by the mixed length rule, show if the guess is of the correct length <p>
     * > - show how many characters are of the correct letter and positions <p>
     * > - show how many characters are of the correct letter but in incorrect positions
     */
    @Override
    void giveClue(Clue clue) {
        if (isMixedLength()) {
            System.out.print("Guess length of " + guess.length() + " is ");
            if (!clue.isCorrectLength()) System.out.print("not");
            System.out.print(" correct.");
        }

        int countCorrectChar = 0;
        int countHasChar = 0;
        for (int pos = 0; pos < guess.length(); pos++) {
            if (clue.isCorrectChar()[pos]) countCorrectChar++;
            if (clue.hasChar()[pos]) countHasChar++;
        }
        System.out.println(countCorrectChar + " are of the correct letter and positions.");
        System.out.println(countHasChar + " are of the correct letter but in incorrect positions.");
    }

}
