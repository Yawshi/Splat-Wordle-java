package wordle;

/**
 * Represents a standard game of Wordle. Inherits from {@code AbstractGame}. <p>
 * Has one constructor: <p>
 * - {@code BasicGame()} runs a game of Wordle. All output is printed on the terminal, returns 
 * nothing. <p>
 * Overrides one method: <p>
 * - {@code giveClue()} prints an interpretation of the {@code Clue} object generated by a guess
 * on the terminal.
 */
public class BasicGame extends AbstractGame {

    /**
     * Runs a game of Wordle, with the specified solution, maximum guesses allowed and presence
     * of the mixed length rule. The game takes the following steps: <p>
     * 1. The player is prompted to make a guess. <p>
     * 2. The guess is stored and used to generate a {@code Clue} object. <p>
     * 3. If the guess matches the solution exactly, inform the player that the game is won. <p>
     * 4. If not, give the clue, informing the player how close they are to the solution. <p>
     * 5. Repeat from step 1 until the player either wins by matching the solution with a guess, 
     * or loses by running out of guesses (has made guesses equal to the maximum number of guesses 
     * allowed). <p>
     * All output is printed on the terminal, and nothing is returned.
     * @param solution the solution to the game
     * @param guessMax the maximum number of guesses allowed this game
     * @param mixedLength whether or not the mixed length rule is in play
     * @see Clue
     */
    BasicGame(String solution, int guessMax, boolean mixedLength) {
        this.solution = solution;
        this.guessMax = guessMax;
        this.mixedLength = mixedLength;
        Clue clue;

        System.out.println();
        System.out.println("--------------------- GAME START ---------------------");
        System.out.println();
        while (getGuessCount() <= getGuessMax()) {
            System.out.println("Guess " + getGuessCount() + " of " + getGuessMax());
            guess = makeGuess();
            clue = generateClue(guess);
            if (clue.isExactMatch()) {
                System.out.println("That is correct! Well done!         " + getSolution());
                System.out.println("You got it in " + getGuessCount() + " guesses.");
                System.out.println();
                System.out.println("--------------------- GAME OVER ---------------------");
                System.out.println();
                return;
            } else {
                giveClue(clue);
                incrementGuessCount();
                System.out.println();
            }
        }
        System.out.println("You ran out of guesses! Better luck next time.");
        System.out.println("The solution is " + getSolution() + ".");
        System.out.println();
        System.out.println("--------------------- GAME OVER ---------------------");
    }

    /**
     * Prints on the terminal an interpretation of the {@code Clue} object provided. Has
     * the following components: <p>
     * - if the game plays by the mixed length rule, show if the guess is of the correct length <p>
     * - show the characters that have the correct letter and positions <p>
     * - show the characters that have the correct letter but incorrect position
     * @see Clue
     */
    @Override
    void giveClue(Clue clue) {
        if (isMixedLength()) {
            System.out.print("Guess length:                       ");
            if (clue.isCorrectLength()) {
                System.out.println(guess.length() + " is correct!");
            } else {
                System.out.println("is not " + guess.length());
            }
        }

        System.out.print("Correct letter and position:        ");
        for (int pos = 0; pos < guess.length(); pos++) {
            if (clue.isCorrectChar()[pos]) {
                System.out.print((char) (guess.charAt(pos)));
            } else {
                System.out.print('-');
            }
        }
        System.out.println();

        System.out.print("Correct letter, incorrect position: ");
        for (int pos = 0; pos < guess.length(); pos++) {
            if (clue.hasChar()[pos]) {
                System.out.print((char) (guess.charAt(pos) + 32));
            } else {
                System.out.print('-');
            }
        }
        System.out.println();
    }
}
